%{
 #include <stdio.h>
 #include <string>
 #include "parse_tree.h"
 #include "grammar.tab.h"
 #define YYDEBUG 1

ParseTreeNode * rootNode;
int yylex(void);
void yyerror(char *);
int yyparse();
typedef struct yy_buffer_state * YY_BUFFER_STATE;
YY_BUFFER_STATE yy_scan_string(const char * str);

%}

%token INTEGER
%token SELECT
%token FROM
%token WHERE
%token GROUP
%token BY
%token HAVING
%token ORDER
%token ASTERISK
%token COMMA
%token PERIOD
%token SEMICOLON
%token AS
%token PLUS_SIGN
%token MINUS_SIGN
%token SOLIDUS
%token OR
%token AND
%token LEFT_PAREN;
%token RIGHT_PAREN;
%token DOUBLE_QUOTE
%token CROSS
%token JOIN
%token NOT
%token IS
%token DOUBLE_PIPE;
%token RIGHT_ARROW
%token IDENTIFIER_BODY 
%token INNER
%token OUTER
%token TRUE
%token FALSE
%token UNKNOWN
%token AVG
%token MAX
%token MIN
%token SUM
%token EVERY
%token ANY
%token SOME
%token COUNT
%token ON
%token LEFT
%token RIGHT
%token FULL
%token B
%token BITS
%token X
%token HEX
%token BETWEEN
%token IN
%token EXACT_NUMBER
%token SIGNED_EXACT_NUMBER
%token APROX_NUMBER
%token SIGNED_APROX_NUMBER
%token STRING
%token QUOTE
%token EQ
%token NEQ
%token LE
%token GE
%token LEQ
%token GEQ
%token COUNT_STAR
%token NEWLINE
%token EMPTY
%token EMPTY1
%token EMPTY2
%token EMPTY3
%token EMPTY4
%token EMPTY5

%union {
	float num;
	char * value;
	ParseTreeNode * node;
	QueryExpression * queryExpression;
	SelectList * selectList;
	TableExpression * tableExpression;
	SelectSubList * selectSubList;
	SelectSubListElement * selectSubListElement;
	DerivedColumn * derivedColumn;
	QualifiedAsterisk * qualifiedAsterisk;
	FromClause * fromClause;
	WhereClause * whereClause;
	GroupByClause * groupByClause;
	HavingClause * havingClause;
	OrderByClause * orderByClause;
	AsClause * asClause;
	AllFieldsReference * allFieldsReference;
	TableReferenceList * tableReferenceList;
	GroupingElementList * groupingElementList;
	ValueExpression * valueExpression;
	NumericValueExpression * numericValueExpression;
	BooleanValueExpression * booleanValueExpression;
	TableReference * tableReference;
	Identifier * identifier;
	TablePrimary * tablePrimary;
	ParenthesizedDerivedColumnList * parenthesizedDerivedColumnList;
	ColumnNameList * columnNameList;
	JoinedTable * joinedTable;
	OrdinaryGroupingSet * ordinaryGroupingSet;
	Concatenation * concatenation;
	SetFunctionType * setFunctionType;
	SetFunctionSpecification * setFunctionSpecification;
	Subquery * subquery;
	FieldReference * fieldReference;
	RoutineInvocation * routineInvocation;
	DelimitedIdentifier * delimitedIdentifier;
	CrossJoin * crossJoin;
	QualifiedJoin * qualifiedJoin;
	GroupingColumnReferenceList * groupingColumnReferenceList;
	UnsignedLiteral * unsignedLiteral;
	GeneralSetFunction * generalSetFunction;
	ValueExpressionList * valueExpressionList;
	JoinType * joinType;
	TruthValue * truthValue;
	GeneralLiteral * generalLiteral;
	IdentifierChain * identifierChain;
	JoinCondition * joinCondition;
	OuterJoinType * outerJoinType;
	Predicate * predicate;
	ParenthesizedBooleanValueExpression * parenthesizedBooleanValueExpression;
	UnsignedNumericLiteral * unsignedNumericLiteral;
	CharacterStringLiteral * characterStringLiteral;
	BitStringLiteral * bitStringLiteral;
	HexStringLiteral * hexStringLiteral;
	ComparisonPredicate * comparisonPredicate;
	BetweenPredicate * betweenPredicate;
	InPredicate * inPredicate;
	LikePredicate * likePredicate;
	NullPredicate * nullPredicate;
	QuantifiedComparisonPredicate * quantifiedComparisonPredicate;
	ExistsPredicate * existsPredicate;
	UniquePredicate * uniquePredicate;
	CompOp * compOp;
	InPredicateValue * inPredicateValue;
	InValueList * inValueList;
	As * as;
	Not * notLiteral;
}

%type <queryExpression>  query_expression
%type <selectList> select_list
%type <tableExpression> table_expression
%type <selectSubList> select_sublist
%type <selectSubListElement> select_sublist_element
%type <derivedColumn> derived_column
%type <qualifiedAsterisk> qualified_asterisk
%type <fromClause> from_clause
%type <whereClause> where_clause
%type <groupByClause> group_by_clause
%type <havingClause> having_clause
%type <orderByClause> order_by_clause
%type <asClause> as_clause
%type <allFieldsReference> all_fields_reference
%type <tableReferenceList> table_reference_list
%type <groupingElementList> grouping_element_list
%type <valueExpression> value_expression
%type <numericValueExpression> numeric_value_expression
%type <booleanValueExpression> boolean_value_expression
%type <tableReference> table_reference
%type <identifier> identifier
%type <tablePrimary> table_primary
%type <parenthesizedDerivedColumnList> parenthesized_derived_column_list
%type <columnNameList> column_name_list
%type <joinedTable> joined_table
%type <ordinaryGroupingSet> ordinary_grouping_set
%type <concatenation> concatenation
%type <setFunctionType> set_function_type
%type <setFunctionSpecification> set_function_specification
%type <subquery> subquery
%type <fieldReference> field_reference
%type <routineInvocation> routine_invocation
%type <delimitedIdentifier> delimited_identifier
%type <crossJoin> cross_join
%type <qualifiedJoin> qualified_join
%type <groupingColumnReferenceList> grouping_column_reference_list
%type <unsignedLiteral> unsigned_literal
%type <generalSetFunction> general_set_function
%type <valueExpressionList> value_expression_list
%type <joinType> join_type
%type <truthValue> truth_value
%type <generalLiteral> general_literal
%type <identifierChain> identifier_chain
%type <joinCondition> join_condition
%type <outerJoinType> outer_join_type
%type <predicate> predicate
%type <parenthesizedBooleanValueExpression> parenthesized_boolean_value_expression
%type <unsignedNumericLiteral> unsigned_numeric_literal
%type <characterStringLiteral> character_string_literal
%type <bitStringLiteral> bit_string_literal
%type <hexStringLiteral> hex_string_literal
%type <comparisonPredicate> comparison_predicate
%type <betweenPredicate> between_predicate
%type <likePredicate> like_predicate
%type <nullPredicate> null_predicate
%type <quantifiedComparisonPredicate> quantified_comparison_predicate
%type <existsPredicate> exists_predicate
%type <uniquePredicate> unique_predicate
%type <compOp> comp_op	
%type <as> as
%type <notLiteral> not
%type <value> BITS
%type <value> EXACT_NUMBER
%type <value> SIGNED_EXACT_NUMBER
%type <value> APROX_NUMBER
%type <value> SIGNED_APROX_NUMBER
%type <value> STRING
%type <value> IDENTIFIER_BODY
%type <value> HEX

%left PLUS_SIGN MINUS_SIGN 
%left ASTERISK SOLIDUS
%left AND
%left OR

%debug
%%

select_query: 
query_expression
| query_expression SEMICOLON {}
| query_expression SEMICOLON NEWLINE {}
| NEWLINE {}
;	

query_expression:
SELECT select_list table_expression {$$ = new QueryExpression($2, $3); rootNode = $$; }
;

select_list: 
ASTERISK {$$ = new SelectList(true, NULL);}
| select_sublist {$$ = new SelectList(false, $1);}
;

select_sublist: 
select_sublist_element	{$$ = new SelectSubList($1, NULL);}
|  select_sublist COMMA select_sublist_element{$$ = new SelectSubList($3, $1);}
;

select_sublist_element:
derived_column {$$ = new SelectSubListElement($1, NULL);}
| qualified_asterisk {$$ = new SelectSubListElement(NULL, $1);}
;

table_expression: 
from_clause where_clause group_by_clause having_clause order_by_clause {$$ = new TableExpression($1, $2, $3, $4, $5);}
;

derived_column:
value_expression {$$ = new DerivedColumn($1, NULL);}
| value_expression as_clause {new DerivedColumn($1, $2);} 
;

qualified_asterisk:
identifier_chain PERIOD ASTERISK {$$ = new QualifiedAsterisk($1, NULL);}
| all_fields_reference {$$ = new QualifiedAsterisk(NULL, $1);}
;

from_clause:
FROM table_reference_list {$$ = new FromClause($2);}
;

where_clause:
WHERE value_expression {$$ = new WhereClause($2);}
| {$$ = NULL;}
;

group_by_clause:
GROUP BY grouping_element_list {$$ = new GroupByClause($3);}
| {$$ = NULL;}
;

having_clause:
HAVING value_expression {$$ = new HavingClause($2);}
| {$$ = NULL;}
;

order_by_clause:
ORDER BY grouping_element_list {$$ = new OrderByClause($3);}
| {$$ = NULL;}
;

as_clause:
as identifier {$$ = new AsClause($2);}
;

all_fields_reference:
value_expression PERIOD ASTERISK {$$ = new AllFieldsReference($1);}
;

table_reference_list:
table_reference {$$ = new TableReferenceList($1, NULL);}
| table_reference_list COMMA table_reference {$$ = new TableReferenceList($3, $1);}
;

grouping_element_list:
ordinary_grouping_set {$$ = new GroupingElementList($1, NULL);}
| grouping_element_list COMMA ordinary_grouping_set{$$ = new GroupingElementList($3, $1);}
;

value_expression:
numeric_value_expression {$$ = $1;}
| concatenation {$$ = $1;}
| boolean_value_expression {$$ = $1;}
| unsigned_literal {$$ = $1;}
| identifier_chain  {$$ = $1;}
| set_function_specification {$$ = $1;}
| field_reference {$$ = $1;}
| routine_invocation {$$ = $1;}
| LEFT_PAREN value_expression RIGHT_PAREN {$$ = new ValueExpression($2);}
;


numeric_value_expression:
value_expression SIGNED_EXACT_NUMBER {if($2[0] == '+') $$ = new SummationNumericExpression($1, atof($2)); 
					else  $$ = new SubtractionNumericalExpression ($1, atof($2));}
| value_expression SIGNED_APROX_NUMBER {if($2[0] == '+') $$ = new SummationNumericExpression($1, atof($2)); 
					else  $$ = new SubtractionNumericalExpression ($1, atof($2));}
| value_expression PLUS_SIGN value_expression {$$ = new SummationNumericExpression($1, $3);}
| value_expression MINUS_SIGN value_expression {$$ = new SubtractionNumericalExpression($1, $3);}
| value_expression ASTERISK value_expression {$$ = new ProductNumericalExpression($1, $3);}
| value_expression SOLIDUS value_expression {$$ = new DivisonNumericalExpression($1, $3);}
;

boolean_value_expression:
predicate {$$ = $1;}
| value_expression IS truth_value {$$ = new IsBooleanValueExpression($1, $3, false);}
| value_expression IS not truth_value {$$ = new IsBooleanValueExpression($1, $4, true);}
| parenthesized_boolean_value_expression {$$ = new BooleanValueExpression($1);} 
| not value_expression {$$ = new BooleanValueExpression($2);}
| value_expression OR value_expression {$$ = new LogicalConjuction($1, $3);}
| value_expression AND value_expression {$$ = new LogicalDisjuction($1, $3);}
;

table_reference:
table_primary {$$ = $1;}
| joined_table {$$ = $1;}
;

identifier: 
IDENTIFIER_BODY {std::string literal($1); $$ = new Identifier(literal);}
| delimited_identifier {$$ = $1;}
;

table_primary: 
identifier {$$ = new TablePrimary($1, NULL, NULL);}
| identifier  as_clause parenthesized_derived_column_list {$$ = new TablePrimary($1, $2, $3);}
| subquery  as_clause  parenthesized_derived_column_list {$$ = new TablePrimary($1, $2, $3);}
| routine_invocation as_clause {new TablePrimary(NULL);}
| LEFT_PAREN joined_table RIGHT_PAREN {$$ = new TablePrimary($2);}
;

parenthesized_derived_column_list:
LEFT_PAREN column_name_list RIGHT_PAREN {$$ = new ParenthesizedDerivedColumnList($2);}
| {$$ = NULL;}
;

column_name_list:
identifier {$$ = new ColumnNameList($1, NULL);}
| column_name_list COMMA identifier{$$ = new ColumnNameList($3, $1);}
;

joined_table:
cross_join {$$ = $1;}
| qualified_join {$$ = $1;}
;

ordinary_grouping_set:
identifier_chain  {$$ = new OrdinaryGroupingSet($1, NULL);}
| LEFT_PAREN grouping_column_reference_list RIGHT_PAREN {$$ = new OrdinaryGroupingSet(NULL, $2);}
;

concatenation:
value_expression DOUBLE_PIPE value_expression {$$ = new Concatenation($1, $3);}
;

set_function_type:
AVG {std::string function("AVG"); $$ = new SetFunctionType(function);}
| MAX {std::string function("MAX"); $$ = new SetFunctionType(function);}
| MIN {std::string function("MIN"); $$ = new SetFunctionType(function);}
| SUM {std::string function("SUM"); $$ = new SetFunctionType(function);}
| EVERY {std::string function("EVERY"); $$ = new SetFunctionType(function);}
| ANY {std::string function("ANY"); $$ = new SetFunctionType(function);}
| SOME {std::string function("SOME"); $$ = new SetFunctionType(function);}
| COUNT {std::string function("COUNT"); $$ = new SetFunctionType(function);}
;

set_function_specification:
COUNT_STAR {$$ = new SetFunctionSpecification(true, NULL);}
| general_set_function {$$ = new SetFunctionSpecification(false, $1);}
;

subquery:
LEFT_PAREN query_expression RIGHT_PAREN{$$ = new Subquery($2);}
;

field_reference:
value_expression PERIOD identifier {$$ = new FieldReference($1, $3);}
;

routine_invocation:
identifier LEFT_PAREN value_expression_list RIGHT_PAREN{$$ = new RoutineInvocation($1, $3);}
;

delimited_identifier:
DOUBLE_QUOTE  IDENTIFIER_BODY  DOUBLE_QUOTE {std::string literal($2); $$ = new DelimitedIdentifier(literal);}
;

cross_join:
table_reference CROSS JOIN  table_primary {$$ = new CrossJoin($1, $4);}
;

qualified_join:
table_reference  JOIN  table_reference join_condition {$$ = new QualifiedJoin($1, $3, NULL, $4);}
| table_reference join_type JOIN  table_reference join_condition {$$ = new QualifiedJoin($1, $4, $2, $5);}
;

grouping_column_reference_list:
identifier_chain  {$$ = new GroupingColumnReferenceList($1, NULL);}
| grouping_column_reference_list COMMA identifier_chain{$$ = new GroupingColumnReferenceList($3, $1);}
;

unsigned_literal:
unsigned_numeric_literal {$$ = new UnsignedLiteral($1);}
|  general_literal {$$ = new UnsignedLiteral($1);}
;

general_set_function:
set_function_type LEFT_PAREN value_expression RIGHT_PAREN {$$ = new GeneralSetFunction($1, $3);}
;

value_expression_list :
value_expression {$$ = new ValueExpressionList($1, NULL);}
| value_expression_list COMMA value_expression {$$ = new ValueExpressionList($3, $1);}
;

join_type:
INNER {$$ = new JoinType(true, NULL);}
| outer_join_type  {$$ = new JoinType(false, $1);}
| outer_join_type  OUTER {$$ = new JoinType(false, $1);}
;

truth_value:
TRUE  {std::string literal("true"); $$ = new TruthValue(literal);}
| FALSE {std::string literal("false"); $$ = new TruthValue(literal);}
| UNKNOWN {std::string literal("unknown"); $$ = new TruthValue(literal);}
;

general_literal:
character_string_literal {$$=$1;}
| bit_string_literal {$$=$1;}
| hex_string_literal {$$=$1;}
| truth_value {$$=$1;}
;

identifier_chain:
identifier {$$ = new IdentifierChain($1, NULL);}
| identifier_chain PERIOD identifier  {$$ = new IdentifierChain($3, $1);}
;

join_condition:
ON boolean_value_expression {$$ = new JoinCondition($2);}
;

outer_join_type:
LEFT {$$ = new OuterJoinType(LEFT_JOIN);}
| RIGHT {$$ = new OuterJoinType(RIGHT_JOIN);}
| FULL {$$ = new OuterJoinType(FULL_JOIN);}
;

predicate:
comparison_predicate {$$ = $1;}
| between_predicate {$$ = $1;}
| like_predicate {$$ = $1;}
| null_predicate {$$ = $1;}
| quantified_comparison_predicate {$$ = $1;}
| exists_predicate {$$ = $1;}
| unique_predicate {$$ = $1;}
;

parenthesized_boolean_value_expression:
LEFT_PAREN boolean_value_expression RIGHT_PAREN {$$ = new ParenthesizedBooleanValueExpression($2);}
;

unsigned_numeric_literal: 
EXACT_NUMBER  {$$ = new UnsignedNumericLiteral(atof($1));}
| APROX_NUMBER {$$ = new UnsignedNumericLiteral(atof($1));}
;

character_string_literal:
STRING {std::string literal($1); $$ = new CharacterStringLiteral(literal);}
;

bit_string_literal:
B QUOTE BITS QUOTE {std::string literal($3); $$ = new BitStringLiteral(literal);}
;

hex_string_literal:
X QUOTE HEX QUOTE {std::string literal($3); $$ = new HexStringLiteral(literal);}
;

comparison_predicate :
value_expression comp_op value_expression {$$ = new ComparisonPredicate($1, $2, $3);}
;


between_predicate:
EMPTY {$$ = NULL;}
;

like_predicate : EMPTY1 {$$ = NULL;}
;

null_predicate : EMPTY2 {$$ = NULL;}
;

quantified_comparison_predicate : EMPTY3 {$$ = NULL;}
;

exists_predicate : EMPTY4 {$$ = NULL;}
;

unique_predicate : EMPTY5 {$$ = NULL;}
;

comp_op:
EQ {$$ = new CompOp(EQUALS);}
| NEQ {$$ = new CompOp(NOT_EQUALS);}
| LE  {$$ = new CompOp(LESS_THAN);}
| GE  {$$ = new CompOp(GREATER_THAN);}
| LEQ {$$ = new CompOp(LESS_EQ_THAN);}
| GEQ {$$ = new CompOp(GREATER_EQ_THAN);}
;

in_predicate_value:
subquery  {$$ = new InPredicateValue($1);}
| LEFT_PAREN in_value_list RIGHT_PAREN {$$ = new InPredicateValue($2);}
;

in_value_list:
value_expression {$$ = new InValueList($1, NULL);}
| in_value_list COMMA  value_expression {$$ = new InValueList($3, $1);}
;

/*token rules*/

as : AS {$$ = new As();}
| {$$ = NULL;}
;

not : NOT {$$ = new Not();}
;

%%

void yyerror(char *s) {
 	fprintf(stderr, "%s\n", s);
}

int parse(std::string command)
{
	yy_scan_string(command.c_str());    
	yyparse();
	return 0;
}

int main_teste(void) 
{
	 yydebug=1;
	 //yy_scan_string("select asd.* from asd;");    
	 yyparse();
	 printf("teste\n"); 
	 return 0;
}





